
name: bookstore-server deploy to AWS EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

   
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
  
      - name: Build with Gradle Wrapper
        run: |
          echo ${{ secrets.APPLICATION_SECRET }} | base64 --decode > ./src/main/resources/application-secret.yml
          chmod +x gradlew
          ./gradlew clean build -x test
  
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/bookstore-server .
      
      - name: docker hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/bookstore-server

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "https://${{ secrets.DOMAIN }}/api/hc/env")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "https://${{ secrets.DOMAIN }}/api/hc/env")
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8082" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          else
            echo "CURRENT_PORT=8082" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          fi
  
              
      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/bookstore-server:latest
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d
        
  
      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v4
        with:
          url: http://${{ secrets.LIVE_SERVER_IP }}:${{env.STOPPED_PORT}}/api/hc/env
          max-attempts: 3
          retry-delay: 10s

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'sed -i "s/set \$backend_url .*/set \$backend_url ${{ env.TARGET_UPSTREAM }};/" /etc/nginx/conf.d/service-env.inc && nginx -s reload'
  
      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            echo "Stopping current container: ${{env.CURRENT_UPSTREAM}}"
            sudo docker stop ${{env.CURRENT_UPSTREAM}} 2>/dev/null || true
            echo "Removing current container: ${{env.CURRENT_UPSTREAM}}"
            sudo docker rm ${{env.CURRENT_UPSTREAM}} 2>/dev/null || true
            sudo docker image prune -a -f

           
